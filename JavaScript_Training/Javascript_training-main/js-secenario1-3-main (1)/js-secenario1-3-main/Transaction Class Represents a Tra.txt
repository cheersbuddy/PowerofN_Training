// Transaction Class: Represents a Transaction
class Transaction {
    constructor(date, description, amount) {
        this.date = date;
        this.description = description;
        this.amount = amount;
    }
}

// UI Class: Handle UI Tasks
class UI {
    static displayTransactions() {
        const transactions = Store.getTransactions();
        transactions.forEach((transaction) => UI.addTransactionToList(transaction));
    }

    static addTransactionToList(transaction) {
        const list = document.querySelector('#book-list');
        const row = document.createElement('tr');
        row.innerHTML = `
            <td>${transaction.date}</td>
            <td>${transaction.description}</td>
            <td>${transaction.amount}</td>
            <td><a href="#" class="btn btn-warning btn-sm update">Update</a></td>
            <td><a href="#" class="btn btn-danger btn-sm delete">X</a></td>
        `;
        list.appendChild(row);
    }

    static deleteTransaction(el) {
        el.parentElement.parentElement.remove(); // Remove the transaction from the UI
    }

    static showAlert(message, className) {
        const div = document.createElement('div');
        div.className = `alert alert-${className}`;
        div.appendChild(document.createTextNode(message));
        const container = document.querySelector('.container');
        const form = document.querySelector('#book-form');
        container.insertBefore(div, form);

        // Vanish in 3 seconds
        setTimeout(() => document.querySelector('.alert').remove(), 3000);
    }

    static clearFields() {
        document.querySelector('#date').value = '';
        document.querySelector('#description').value = '';
        document.querySelector('#amount').value = '';
    }
}

// Store Class: Handles Storage
class Store {
    static getTransactions() {
        let transactions;
        if (localStorage.getItem('transactions') === null) {
            transactions = [];
        } else {
            transactions = JSON.parse(localStorage.getItem('transactions'));
        }
        return transactions;
    }

    static addTransaction(transaction) {
        const transactions = Store.getTransactions();
        transactions.push(transaction);
        localStorage.setItem('transactions', JSON.stringify(transactions));
    }

    static removeTransaction(description) {
        let transactions = Store.getTransactions();
        transactions = transactions.filter((transaction) => transaction.description !== description);
        localStorage.setItem('transactions', JSON.stringify(transactions));
    }
}

// Event: Display Transactions
document.addEventListener('DOMContentLoaded', UI.displayTransactions);

// Event: Add a Transaction
document.querySelector('#book-form').addEventListener('submit', (e) => {
    // Prevent actual submit
    e.preventDefault();

    // Get form values
    const date = document.querySelector('#date').value.trim();
    const description = document.querySelector('#description').value.trim();
    const amount = document.querySelector('#amount').value.trim();

    // Validate
    if (date === '' || description === '' || amount === '') {
        UI.showAlert('Please fill in all fields', 'danger');
        return;
    }

    // Instantiate a new transaction
    const transaction = new Transaction(date, description, amount);

    // Add Transaction to UI
    UI.addTransactionToList(transaction);

    // Add transaction to store
    Store.addTransaction(transaction);

    // Show success message
    UI.showAlert('Transaction Added', 'success');

    // Clear fields
    UI.clearFields();
});

// Variable to store the element to be deleted
let deleteElement;

// Modal DOM elements
const modal = document.getElementById('deleteModal');
const confirmDeleteButton = document.getElementById('confirmDelete');
const cancelDeleteButton = document.getElementById('cancelDelete');
const closeModalButton = document.getElementById('closeModal');

// Event: Remove a Transaction
document.querySelector('#book-list').addEventListener('click', (e) => {
    if (e.target.classList.contains('delete')) {
        // Show the modal
        deleteElement = e.target; // Store the element to be deleted
        modal.style.display = 'block';
    }
});

// Confirm deletion
confirmDeleteButton.addEventListener('click', () => {
    // Remove transaction from UI
    UI.deleteTransaction(deleteElement);
    
    // Remove transaction from store
    Store.removeTransaction(deleteElement.parentElement.previousElementSibling.previousElementSibling.textContent);
    
    // Show success message
    UI.showAlert('Transaction Removed', 'success');

    // Close the modal
    modal.style.display = 'none';
});

// Cancel deletion
cancelDeleteButton.addEventListener('click', () => {
    // Close the modal
    modal.style.display = 'none';
});

// Close modal when clicking the close button
closeModalButton.addEventListener('click', () => {
    modal.style.display = 'none';
});

// Close modal when clicking outside of it
window.onclick = function(event) {
    if (event.target === modal) {
        modal.style.display = 'none';
    }
};

// Format amount input as a comma-separated number
function formatAmount(e) {
    let value = e.target.value;

    // Check if the input contains a period (for decimals)
    if (value.includes('.')) {
        let [integerPart, decimalPart] = value.split('.');

        // Ensure the decimal part is at most 2 digits
        decimalPart = decimalPart.substring(0, 2);

        // Format the integer part with commas
        integerPart = integerPart.replace(/\B(?=(\d{3})+(?!\d))/g, ',');

        // Combine the formatted integer part with the decimal part
        e.target.value = `${integerPart}.${decimalPart}`;
    } else {
        // Format the value as a comma-separated number
        e.target.value = value.replace(/\B(?=(\d{3})+(?!\d))/g, ',');
    }
}

// Attaching the function to the input event
const amountInput = document.querySelector('#amount');
amountInput.addEventListener('input', formatAmount);

// Datepicker Initialization
$(document).ready(function () {
    $('.datepicker').datepicker({
        format: 'dd-M-yyyy', // Bootstrap datepicker format
        autoclose: true,
        todayHighlight: true
    });
});

// Redirect to settings page
// Redirect to settings page
$(document).ready(function () {
    $('.datepicker').datepicker({
        format: 'dd-M-yyyy', // Bootstrap datepicker format
        autoclose: true,
        todayHighlight: true
    }).on('changeDate', function (e) {
        // Format the selected date
        const selectedDate = e.format(); // Gets the selected date
        const options = { year: 'numeric', month: 'short', day: '2-digit' };
        const formattedDate = new Date(selectedDate).toLocaleDateString('en-GB', options);
        $(this).val(formattedDate); // Set the formatted date back to the input field
    });
});


